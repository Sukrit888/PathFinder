# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HafWdc0oQd1e5aCrlcsfi_SD_JemN2wC
"""

import streamlit as st
import networkx as nx
import matplotlib.pyplot as plt
from my_pathfinder import Graph

st.set_page_config(page_title="PathFinder", layout="wide")

# Initialize session state
if 'graph' not in st.session_state:
    st.session_state.graph = Graph()
if 'nx_graph' not in st.session_state:
    st.session_state.nx_graph = nx.Graph()
if 'coordinates' not in st.session_state:
    st.session_state.coordinates = {}

st.title("üß≠ PathFinder ‚Äì Smart Navigation System")

st.sidebar.header("üìå Add Nodes and Edges")

# Add nodes
node = st.sidebar.text_input("Add Node (single letter or name):")
x = st.sidebar.number_input("X Coordinate", step=1.0, value=0.0)
y = st.sidebar.number_input("Y Coordinate", step=1.0, value=0.0)
if st.sidebar.button("Add Node"):
    st.session_state.graph.add_coordinates(node, x, y)
    st.session_state.coordinates[node] = (x, y)
    st.success(f"Node '{node}' with coordinates ({x}, {y}) added.")

# Add edge
col1, col2 = st.sidebar.columns(2)
source = col1.text_input("From Node:")
target = col2.text_input("To Node:")
weight = st.sidebar.number_input("Edge Weight", value=1.0, step=0.1)
if st.sidebar.button("Add Edge"):
    st.session_state.graph.add_edge(source, target, weight)
    st.session_state.nx_graph.add_edge(source, target, weight=weight)
    st.success(f"Edge from '{source}' to '{target}' with weight {weight} added.")

# Graph visualization
st.subheader("üìä Graph Visualization")

if len(st.session_state.coordinates) > 0:
    fig, ax = plt.subplots(figsize=(8, 6))
    pos = st.session_state.coordinates
    nx.draw(st.session_state.nx_graph, pos, with_labels=True, node_color='lightblue', node_size=1000, font_size=12, font_weight='bold')
    labels = nx.get_edge_attributes(st.session_state.nx_graph, 'weight')
    nx.draw_networkx_edge_labels(st.session_state.nx_graph, pos, edge_labels=labels)
    st.pyplot(fig)
else:
    st.info("Add at least one node to visualize the graph.")

# Shortest path finder
st.subheader("üîç Find Shortest Path")

col3, col4 = st.columns(2)
start = col3.selectbox("Start Node", options=list(st.session_state.coordinates.keys()))
end = col4.selectbox("End Node", options=list(st.session_state.coordinates.keys()))
algo = st.radio("Choose Algorithm", ["Dijkstra", "A* Search"])

if st.button("Find Path"):
    if algo == "Dijkstra":
        result = st.session_state.graph.dijkstra(start, end)
    else:
        result = st.session_state.graph.astar(start, end)

    if result:
        path, cost = result
        st.success(f"‚úÖ Path found: {' ‚û°Ô∏è '.join(path)} (Total Distance: {cost})")
    else:
        st.error("‚ùå No path found between selected nodes.")